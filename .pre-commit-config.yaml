# Pre-commit configuration for AI Art Classroom
# Install with: pre-commit install
# Run manually with: pre-commit run --all-files

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: detect-private-key

  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        args: [--line-length=79]
        language_version: python3

  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: [--profile=black, --line-length=79]

  - repo: https://github.com/pycqa/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
        args: ['--max-line-length=79', '--extend-ignore=E203,W503']

  - repo: https://github.com/pycqa/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: [-r, --skip, "B101,B603,B607"]
        exclude: ^tests/

  - repo: https://github.com/python-poetry/poetry
    rev: 2.1.3
    hooks:
      - id: poetry-check

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.13.0
    hooks:
      - id: mypy
        args: [
          --strict,
          --ignore-missing-imports,
          --warn-redundant-casts,
          --warn-unused-ignores,
          --warn-return-any,
          --warn-unreachable,
          --disallow-untyped-defs,
          --disallow-incomplete-defs,
          --check-untyped-defs,
          --disallow-untyped-decorators,
          --no-implicit-optional,
          --show-error-codes,
          --show-error-context
        ]
        additional_dependencies: [types-requests, types-setuptools, types-urllib3]
        exclude: ^tests/

  - repo: local
    hooks:
      - id: pytest-tests
        name: Run pytest test suite
        entry: pytest
        language: system
        pass_filenames: false
        args: [tests/, -v, --tb=short, -q]
        stages: [pre-commit]

  - repo: local
    hooks:
      - id: pip-audit
        name: pip-audit vulnerability scan
        entry: pip-audit
        language: system
        pass_filenames: false
        args: [--desc, --format=columns]

      - id: snyk-security-scan
        name: Snyk vulnerability scan (with API limit handling)
        entry: powershell
        language: system
        pass_filenames: false
        args:
          - -Command
          - |
            # Check if Snyk CLI is available
            if (-not (Get-Command snyk -ErrorAction SilentlyContinue)) {
              Write-Host "‚ö†Ô∏è  Snyk CLI not found - install with: npm install -g snyk" -ForegroundColor Yellow
              Write-Host "‚úÖ Pre-commit continues (Snyk is optional for local development)" -ForegroundColor Green
              exit 0
            }

            # Check if requirements.txt exists
            if (-not (Test-Path "requirements.txt")) {
              Write-Host "‚ö†Ô∏è  requirements.txt not found - skipping Snyk scan" -ForegroundColor Yellow
              exit 0
            }

            Write-Host "üîç Running Snyk vulnerability scan..." -ForegroundColor Cyan

            # Run Snyk scan and capture output
            try {
              $snyk_output = snyk test --file=requirements.txt --package-manager=pip 2>&1
              $snyk_exit_code = $LASTEXITCODE
            } catch {
              Write-Host "‚ùå Snyk command failed to execute" -ForegroundColor Red
              exit 0
            }

            # Convert output to string for checking
            $output_string = $snyk_output -join "`n"

            # Check for API limit messages
            if ($output_string -match "monthly limit|rate limit|quota exceeded|too many requests") {
              Write-Host "‚ö†Ô∏è  Snyk API limit reached - gracefully skipping scan" -ForegroundColor Yellow
              Write-Host "üìä Your monthly Snyk scan limit has been reached" -ForegroundColor Cyan
              Write-Host "üîÑ Limit resets monthly - scan will resume automatically" -ForegroundColor Cyan
              Write-Host "‚úÖ Pre-commit continues (other security tools still active)" -ForegroundColor Green
              exit 0
            }

            # Check for authentication issues
            if ($output_string -match "authentication|unauthorized|login required") {
              Write-Host "‚ö†Ô∏è  Snyk authentication required - run: snyk auth" -ForegroundColor Yellow
              Write-Host "üí° For local development, Snyk authentication is optional" -ForegroundColor Cyan
              Write-Host "‚úÖ Pre-commit continues (pip-audit and bandit still protect you)" -ForegroundColor Green
              exit 0
            }

            # Display results
            Write-Host $output_string

            # Success or vulnerability findings
            if ($snyk_exit_code -eq 0) {
              Write-Host "‚úÖ Snyk scan completed - no vulnerabilities found" -ForegroundColor Green
            } elseif ($snyk_exit_code -eq 1) {
              Write-Host "‚ö†Ô∏è  Snyk found vulnerabilities - please review above" -ForegroundColor Yellow
              Write-Host "üí° Run 'snyk wizard' to get fix suggestions" -ForegroundColor Cyan
              # Don't fail pre-commit for vulnerabilities in development
              # You can change this to 'exit 1' if you want to block commits
              exit 0
            } else {
              Write-Host "‚ùå Snyk scan failed with unexpected error" -ForegroundColor Red
              # Don't fail pre-commit for Snyk errors
              exit 0
            }

      - id: python-check-syntax
        name: Check Python syntax
        entry: python -m py_compile
        language: system
        files: \.py$

      - id: azure-env-check
        name: Check for Azure secrets
        entry: powershell -Command "if (Select-String -Path '*.py','*.yml','*.yaml' -Pattern 'azure.*key\s*=|azure.*secret\s*=|azure.*password\s*=|AZURE.*KEY\s*=|AZURE.*SECRET\s*=|AZURE.*PASSWORD\s*=' -Exclude '*PLACEHOLDER*','*example*','*test*','*#*') { Write-Host 'Potential Azure secrets found'; exit 1 }"
        language: system
        pass_filenames: false

      - id: env-file-check
        name: Check .env file not committed
        entry: powershell -Command "if (Test-Path '.env') { Write-Host '.env file should not be committed'; exit 1 }"
        language: system
        pass_filenames: false
